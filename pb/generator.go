package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"reflect"
	"strings"

	"github.com/xjdrew/daisy/pb/parser"
)

const (
	PACKAGENAME = "protolist"
	VARNAME     = "Modules"
)

func printError(err error, msgs ...string) {
	s := strings.Join(msgs, " ") + ":" + err.Error()
	log.Print("protolist-generator error:", s)
	os.Exit(1)
}

func generate(modules []parser.Module) []byte {
	source := fmt.Sprintf("%#v", modules)
	source = strings.Replace(source, ",", ",\n", -1)
	source = strings.Replace(source, "{", "{\n", -1)
	source = strings.Replace(source, "}", ",\n}", -1)

	b := new(bytes.Buffer)
	b.WriteString("// Code generated by protolist-generator.\n")
	b.WriteString("// DO NOT EDIT!\n")
	b.WriteString("\n")

	b.WriteString(fmt.Sprintf("package %s\n", PACKAGENAME))
	b.WriteString(fmt.Sprintf("import %q\n", reflect.TypeOf(modules).Elem().PkgPath()))
	b.WriteString("\n")
	b.WriteString(fmt.Sprintf("var %s =", VARNAME))
	b.WriteString(source)

	data, err := format.Source(b.Bytes())
	if err != nil {
		printError(err, "format output")
	}
	return data
}
func main() {
	data, err := ioutil.ReadAll(os.Stdin)
	if err != nil {
		printError(err, "reading input")
	}

	modules, err := parser.ParseData(string(data))
	if err != nil {
		printError(err, "reading input")
	}

	data = generate(modules)
	if _, err = os.Stdout.Write(data); err != nil {
		printError(err, "write output")
	}
}
